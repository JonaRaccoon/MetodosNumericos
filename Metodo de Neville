{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPgICFxATeC4ZEciHn2lUJC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JonaRaccoon/MetodosNumericos/blob/main/Metodo%20de%20Neville\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Metodo de Neville**\n",
        "\n",
        "Una dificutad con la interpolacion de Lagrange es que el termino del error es dificil de aplicar. Ahora, derivemos estos polinomios de aproximacion de una manera que use los calculos previos para una mayor ventaja."
      ],
      "metadata": {
        "id": "iUQKoLA8dApK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "De entrada tendremos n puntos xi, y sus respectivos f(xi). Aplicaremos la siguiente formula:"
      ],
      "metadata": {
        "id": "TKFFub9WeeKi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$Qij = \\frac{(x-xi-j)Qi,j-1 - (x-xi)Qi-1,j-1}{xi-xi-j}$"
      ],
      "metadata": {
        "id": "Mk6u78qdfPNc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "id": "dzczkgNnrN_P"
      },
      "outputs": [],
      "source": [
        "import sympy as sp\n",
        "import numpy as np\n",
        "from tabulate import tabulate\n",
        "\n",
        "xs=[1.0,1.3,1.6,1.9,2.2]\n",
        "fxs=[.7651977,.6200860,.4554022,.2818186,.1103623]\n",
        "qs=[fxs]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En este caso, iteraremos la i manteniendo fija la j."
      ],
      "metadata": {
        "id": "GcA7lWVnhWKk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for j in range(1,len(xs)):\n",
        "  qs.append([])\n",
        "  for i in range(j, len(xs)):\n",
        "    qij=((1.5-xs[i-j])*qs[j-1][i-j+1] - (1.5-xs[i])*qs[j-1][i-j])/(xs[i]-xs[i-j])\n",
        "    qs[j].append(qij)"
      ],
      "metadata": {
        "id": "xaBT3_LWegCy"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "table = []\n",
        "for i in range(len(xs)):\n",
        "    row = []\n",
        "    for j in range(len(xs)):\n",
        "        if j > i:\n",
        "            row.append(\"\")\n",
        "        else:\n",
        "            expr = qs[j][i - j]\n",
        "            row.append(str(expr))\n",
        "    table.append(row)\n",
        "\n",
        "headers = [f\"q_{j}\" for j in range(len(xs))]\n",
        "print(tabulate(table, headers=headers, tablefmt=\"grid\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ndc8E5SYjaUT",
        "outputId": "a9163207-a2ec-4a72-d9cd-b9988374b5d6"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------+--------------------+--------------------+--------------------+--------------------+\n",
            "|      q_0 | q_1                | q_2                | q_3                | q_4                |\n",
            "+==========+====================+====================+====================+====================+\n",
            "| 0.765198 |                    |                    |                    |                    |\n",
            "+----------+--------------------+--------------------+--------------------+--------------------+\n",
            "| 0.620086 | 0.5233448666666667 |                    |                    |                    |\n",
            "+----------+--------------------+--------------------+--------------------+--------------------+\n",
            "| 0.455402 | 0.5102968          | 0.5124714777777778 |                    |                    |\n",
            "+----------+--------------------+--------------------+--------------------+--------------------+\n",
            "| 0.281819 | 0.5132634          | 0.5112856666666666 | 0.5118126938271604 |                    |\n",
            "+----------+--------------------+--------------------+--------------------+--------------------+\n",
            "| 0.110362 | 0.5104269999999997 | 0.5137361333333335 | 0.5118302148148148 | 0.5118199942386831 |\n",
            "+----------+--------------------+--------------------+--------------------+--------------------+\n"
          ]
        }
      ]
    }
  ]
}